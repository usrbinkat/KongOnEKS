# kubectl create secret generic kong-enterprise-license -n kong --from-file=license=/home/usrbinkat/.kong-license-data/license.json
# 
# podman run -it --rm --pull always --user root -v /tmp/kong:/tmp/kong:z docker.io/kong/kong -- kong hybrid gen_cert /tmp/kong/cluster.crt /tmp/kong/cluster.key 
# kubectl create secret tls kong-cluster-cert --namespace kong --cert=/tmp/kong/cluster.crt --key=/tmp/kong/cluster.key
# 
# kubectl create secret generic kong-enterprise-superuser-password -n kong --from-literal=password=password
# echo "YXBpVmVyc2lvbjogdjEKbWV0YWRhdGE6CiAgbmFtZToga29uZy1zZXNzaW9uLWNvbmZpZwogIG5hbWVzcGFjZToga29uZwpraW5kOiBTZWNyZXQKdHlwZTogT3BhcXVlCmRhdGE6CiAgYWRtaW5fZ3VpX3Nlc3Npb25fY29uZjogZXlKamIyOXJhV1ZmYm1GdFpTSTZJbUZrYldsdVgzTmxjM05wYjI0aUxDSmpiMjlyYVdWZmMyRnRaWE5wZEdVaU9pSnZabVlpTENKelpXTnlaWFFpT2lKd1lYTnpkMjl5WkNJc0ltTnZiMnRwWlY5elpXTjFjbVVpT21aaGJITmxMQ0p6ZEc5eVlXZGxJam9pYTI5dVp5SjlDZz09CiAgcG9ydGFsX3Nlc3Npb25fY29uZjogZXlKamIyOXJhV1ZmYm1GdFpTSTZJbkJ2Y25SaGJGOXpaWE56YVc5dUlpd2lZMjl2YTJsbFgzTmhiV1Z6YVhSbElqb2liMlptSWl3aVkyOXZhMmxsWDJSdmJXRnBiaUk2SW10dmJtY3ViR0ZpSWl3aWMyVmpjbVYwSWpvaWNHRnpjM2R2Y21RaUxDSmpiMjlyYVdWZmMyVmpkWEpsSWpwbVlXeHpaU3dpYzNSdmNtRm5aU0k2SW10dmJtY2lmUW89Cg==" | base64 -d | kubectl apply -n kong -f -
#
# podman run -it --rm --privileged --pull always --user root -v /tmp/kong:/tmp/kong:z docker.io/kong/kong -- kong hybrid gen_cert /tmp/kong/cluster.crt /tmp/kong/cluster.key
# kubectl create secret tls 
#
# To connect to Kong, please execute the following commands:
#   HOST=$(kubectl get svc --namespace kong upgrade-kong-proxy -o
#   jsonpath='{.status.loadBalancer.ingress[0].ip}')
#   PORT=$(kubectl get svc --namespace kong upgrade-kong-proxy -o
#   jsonpath='{.spec.ports[0].port}')
#   export PROXY_IP=${HOST}:${PORT}
#   curl $PROXY_IP

replicaCount: 2
deployment:
  kong:
    enabled: true
    daemonset: false
image:
  tag: "2.4"
  repository: docker.io/kong/kong-gateway
  pullPolicy: Always
  pullSecrets: {}
env:
  role: control_plane
  portal: on
  vitals: on
  log_level: debug
  prefix: /kong_prefix/
  nginx_worker_processes: "2"
  anonymous_reports: "off"
  smtp_mock: "on"
  database: "postgres"
  pg_user: kong
  pg_database: kong
  pg_host: "postgresdb2876999.cnc7tkeqsmj9.us-east-1.rds.amazonaws.com"
  pg_password: password
  # valueFrom:
  #  secretKeyRef:
  #    name: kong-postgres-password
  #    key: password
  password: "password"
  # secretKeyRef:
  #   name: kong-enterprise-superuser-password
  #   key: password
  cluster_cert: /etc/secrets/kong-cluster-cert/tls.crt
  cluster_cert_key: /etc/secrets/kong-cluster-cert/tls.key
  lua_ssl_trusted_certificate: /etc/secrets/kong-cluster-cert/tls.crt
  portal_cors_origins: "*"
  portal_auth: basic-auth
  portal_session_conf:
    valueFrom:
      secretKeyRef:
        name: kong-session-config
        key: portal_session_conf
  portal_api_error_log: /dev/stderr
  portal_api_access_log: /dev/stdout
  admin_gui_error_log: /dev/stderr
  admin_gui_access_log: /dev/stdout
  admin_error_log: /dev/stderr
  admin_access_log: /dev/stdout
  proxy_error_log: /dev/stderr
  proxy_access_log: /dev/stdout
  audit_log: "on"

secretVolumes: 
- kong-cluster-cert

plugins: {}

manager:
  enabled: true
  type: ClusterIP
  annotations:
    konghq.com/protocol: "https"
  http:
    enabled: false
  tls:
    enabled: true
    servicePort: 8445
    containerPort: 8445
    parameters:
    - http2
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "kong"
    tls: manager.kong.microk8s.lab
    hostname: manager.kong.microk8s.lab
    path: /
  labels: {}

portal:
  enabled: true
  type: ClusterIP
  annotations:
    konghq.com/protocol: "https"
  http:
    enabled: true
    servicePort: 8003
    containerPort: 8003
    parameters: []
  tls:
    enabled: true
    servicePort: 8446
    containerPort: 8446
    parameters:
    - http2
  ingress:
    enabled: true
    tls: portal.kong.microk8s.lab
    hostname: portal.kong.microk8s.lab
    annotations:
      kubernetes.io/ingress.class: "kong"
    path: /
  labels: {}

portalapi:
  enabled: true
  type: ClusterIP
  annotations:
    konghq.com/protocol: "https"
  http:
    enabled: true
    servicePort: 8004
    containerPort: 8004
    parameters: []
  tls:
    enabled: true
    servicePort: 8447
    containerPort: 8447
    parameters:
    - http2
  ingress:
    enabled: true
    tls: papi.kong.microk8s.lab
    hostname: papi.kong.microk8s.lab
    annotations:
      kubernetes.io/ingress.class: "kong"
    path: /
  labels: {}

admin:
  enabled: true
  type: ClusterIP
  annotations:
    konghq.com/protocol: "https"
  http:
    enabled: false
  tls:
    enabled: true
    servicePort: 8444
    containerPort: 8444
    parameters:
    - http2
  ingress:
    enabled: true
    tls: api.kong.microk8s.lab
    hostname: api.kong.microk8s.lab
    path: /
    annotations:
      kubernetes.io/ingress.class: "kong"
  labels: {}

proxy:
  enabled: false

status:
  enabled: true
  http:
    enabled: true
    containerPort: 8100
    parameters: []
  tls:
    enabled: false
    containerPort: 8543
    parameters: []

cluster:
  enabled: true
  tls:
    enabled: true
    servicePort: 8005
    containerPort: 8005
    parameters: []
  type: ClusterIP
  annotations: {}
  labels: {}

migrations:
  # TODO: re-activate pre-upgrade mitigations
  preUpgrade: true
  postUpgrade: true
  resources:
    limits:
      cpu: 100m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 128Mi
  jobAnnotations: {}
  annotations: {}

ingressController:
  enabled: true
  installCRDs: true
  args: ["--v=5"]
  env:
    publish_service: kong/dataplane-kong-proxy
    kong_admin_tls_skip_verify: true
    kong_admin_token:
      valueFrom:
        secretKeyRef:
          name: kong-enterprise-superuser-password
          key: password
  admissionWebhook:
    enabled: true
    failurePolicy: Fail
    port: 8080
  ingressClass: kong
  rbac:
    create: true
  serviceAccount:
    create: true
    name:
    annotations: {}
  livenessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  resources:
    limits:
      cpu: 100m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 128Mi

readinessProbe:
  httpGet:
    path: "/status"
    port: status
    scheme: HTTP
  initialDelaySeconds: 5
  timeoutSeconds: 5
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3
livenessProbe:
  httpGet:
    path: "/status"
    port: status
    scheme: HTTP
  initialDelaySeconds: 5
  timeoutSeconds: 5
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: "100%"
    maxUnavailable: "0%"

lifecycle:
  preStop:
    exec:
      command: ["/bin/sh", "-c", "/bin/sleep 15 && kong quit"]

deploymentAnnotations:
  kuma.io/gateway: enabled
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage:
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
podSecurityPolicy:
  enabled: false
  spec:
    privileged: false
    fsGroup:
      rule: RunAsAny
    runAsUser:
      rule: RunAsAny
    runAsGroup:
      rule: RunAsAny
    seLinux:
      rule: RunAsAny
    supplementalGroups:
      rule: RunAsAny
    volumes:
      - 'configMap'
      - 'secret'
      - 'emptyDir'
    allowPrivilegeEscalation: false
    hostNetwork: false
    hostIPC: false
    hostPID: false
    readOnlyRootFilesystem: true
enterprise:
  enabled: true
  license_secret: kong-enterprise-license
  vitals:
    enabled: true
  portal:
    enabled: true
  rbac:
    enabled: true
    admin_gui_auth: basic-auth
    session_conf_secret: kong-session-config
    admin_gui_auth_conf_secret: kong-admin-gui-auth-conf-secret
  smtp:
    enabled: true

clustertelemetry:
  enabled: true
  type: ClusterIP
  tls:
    enabled: true
    servicePort: 8006
    containerPort: 8006
    parameters: []
  annotations: {}
  labels: {}
waitImage:
  enabled: true
  pullPolicy: IfNotPresent
extraConfigMaps: []
extraSecrets: []
priorityClassName: ""
securityContext: {}
serviceMonitor:
  enabled: false
podDisruptionBudget:
  enabled: true
  maxUnavailable: "50%"
postgresql:
  enabled: false
affinity: {}
resources: {}
podLabels: {}
tolerations: []
nodeSelector: {}
podAnnotations: {}
topologySpreadConstraints: []
terminationGracePeriodSeconds: 30
